services:
  chain:
    container_name: chain
    image: ghcr.io/foundry-rs/foundry:latest
    ports: ["${CHAIN_RPC}:8545"]
    command: ["anvil --host=0.0.0.0 --chain-id=1337 --base-fee=0"]
    healthcheck: { interval: 1s, retries: 10, test: cast block }

  ipfs:
    container_name: ipfs
    image: ipfs/kubo:v0.27.0
    ports: ["${IPFS_RPC}:5001"]
    healthcheck: { interval: 1s, retries: 10, test: ipfs id }

  postgres:
    container_name: postgres
    image: postgres:14.5-alpine
    ports: ["${POSTGRES}:5432"]
    command: ["postgres", "-cshared_preload_libraries=pg_stat_statements"]
    volumes:
      - ./postgres/setup.sql:/docker-entrypoint-initdb.d/setup.sql:ro
    environment:
      POSTGRES_INITDB_ARGS: "--encoding UTF8 --locale=C"
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_USER: postgres
    healthcheck: { interval: 1s, retries: 10, test: pg_isready -U postgres }

  graph-node:
    container_name: graph-node
    build: { context: "graph-node" }
    depends_on:
      chain: { condition: service_healthy }
      ipfs: { condition: service_healthy }
      postgres: { condition: service_healthy }
    stop_signal: SIGKILL
    ports:
      - ${GRAPH_NODE_GRAPHQL}:8000
      - ${GRAPH_NODE_ADMIN}:8020
      - ${GRAPH_NODE_STATUS}:8030
      - ${GRAPH_NODE_METRICS}:8040
    volumes:
      - ./.env:/opt/.env:ro
    healthcheck:
      { interval: 1s, retries: 10, test: curl -f http://127.0.0.1:8030 }

  graph-contracts:
    container_name: graph-contracts
    build: { context: graph-contracts }
    depends_on:
      graph-node: { condition: service_healthy }
    volumes:
      - ./.env:/opt/.env:ro
      - ./graph-contracts.json:/opt/graph-contracts.json:ro

  block-oracle:
    container_name: block-oracle
    build: { context: block-oracle }
    depends_on:
      graph-contracts: { condition: service_completed_successfully }
    stop_signal: SIGKILL
    volumes:
      - ./.env:/opt/.env:ro
      - ./graph-contracts.json:/opt/graph-contracts.json:ro
    healthcheck:
      interval: 1s
      retries: 600
      test: curl -f http://127.0.0.1:9090/metrics

  indexer-agent:
    container_name: indexer-agent
    build: { context: indexer-agent }
    depends_on:
      block-oracle: { condition: service_healthy }
    ports: ["${INDEXER_MANAGEMENT}:7600"]
    stop_signal: SIGKILL
    volumes:
      - ./.env:/opt/.env:ro
      - ./graph-contracts.json:/opt/graph-contracts.json:ro
    healthcheck:
      interval: 10s
      retries: 600
      test: curl -f http://127.0.0.1:7600/

  subgraph-deploy:
    container_name: subgraph-deploy
    build: { context: subgraph-deploy }
    depends_on:
      indexer-agent: { condition: service_healthy }
    volumes:
      - ./.env:/opt/.env:ro
      - ./graph-contracts.json:/opt/graph-contracts.json:ro

  indexer-service-ts:
    container_name: indexer-service-ts
    build: { context: indexer-service-ts }
    depends_on:
      block-oracle: { condition: service_healthy }
    ports: ["${INDEXER_SERVICE}:7601"]
    stop_signal: SIGKILL
    volumes:
      - ./.env:/opt/.env:ro
      - ./graph-contracts.json:/opt/graph-contracts.json:ro

  gateway:
    container_name: gateway
    build: { context: gateway }
    depends_on:
      graph-contracts: { condition: service_completed_successfully }
    ports: ["${GATEWAY}:7700"]
    stop_signal: SIGKILL
    volumes:
      - ./.env:/opt/.env:ro
      - ./graph-contracts.json:/opt/graph-contracts.json:ro

  redpanda:
    container_name: redpanda
    image: docker.redpanda.com/redpandadata/redpanda:v23.3.5
    ports:
      - ${REDPANDA_KAFKA}:9092
      - ${REDPANDA_ADMIN}:9644
      - ${REDPANDA_PANDAPROXY}:8082
      - ${REDPANDA_SCHEMA_REGISTRY}:8081
    command:
      - redpanda start
      - --smp 1
      - --memory 1G
      - --mode dev-container
      - --default-log-level=info
      - --kafka-addr 0.0.0.0:9092
      - --advertise-kafka-addr redpanda:9092
      - --pandaproxy-addr 0.0.0.0:8082
      - --schema-registry-addr 0.0.0.0:8081
